version: 1
shathel-stack:
  gav: git@github.com/s4s0l/shathel-stacks:proxy:$version
  deployName: proxy
  pre-provisioners:
  enrichers:
    preparePassword:
        target: SELF
        inline: |
            import org.s4s0l.shathel.commons.utils.ExecWrapper
            def safePassword = env['SHATHEL_ENV_SAFEPASSWORD']
            def manager = api.secretManager
            if (env["SHATHEL_ENV_SHATHEL_DFP_USERS_MONITORING"]!=null || safePassword == null || manager.secretExists('shathel_dfp_users_monitoring')){
              return
            }
            def hashedPassword = new ExecWrapper(log, "mkpasswd").execute(safePassword.bytes, "-s -m sha-512").output
            def secretContents = "admin:${hashedPassword}"
            LOGGER.info("Monitoring secret will be set to safe password: " + secretContents);
            compose.mapSecrets {
                Map<String,String> secret ->
                if (secret.name.equals("shathel_dfp_users_monitoring")) {
                    //does not exist will be created in pre provisioning
                    provisioners.add("proxy-secret-create:${secret.name}", { context ->
                        manager.secretCreate(secret.name, {secretContents.bytes})
                    } as org.s4s0l.shathel.commons.core.environment.ProvisionerExecutable)
                    //do not change the name, default secret enricher will do
                    return [name: secret.name, external: true]
                } else {
                    secret
                }
            }
    disableMonitoring:
        target: DEPS
        inline: |
          def services = compose.findServicesWithLabels("com.df.notify","true")
          def added = false
          def disabledMonitoring = env['SHATHEL_PROXY_DISABLE_MONITORING'] == "true"
          if (!services.isEmpty()){
              services.each {
                  def monitoringProxy = it.deploy.labels['com.df.usersSecret'] == 'monitoring'
                  if(disabledMonitoring && monitoringProxy){
                      LOGGER.info("Disabled proxy for service ${stack.name} as SHATHEL_PROXY_DISABLE_MONITORING=false")
                      it.deploy.labels['com.df.notify'] = 'false'
                      def selfReference = new org.s4s0l.shathel.commons.core.stack.StackReference("git@github.com/s4s0l/shathel-stacks:proxy:any")
                      stack.dependencies.find {it.stackReference.isSameStack(selfReference)}.envs.keySet().each {
                          env.remove(it)
                      }
                  }else{
                      compose.addNetworkToService(it, "proxy_network")
                      if (monitoringProxy) {
                              it.deploy.labels['com.df.usersPassEncrypted'] = 'true'
                      }
                      added = true
                  }
              }
          }
          if (added){
            compose.addExternalNetwork("proxy_network")
          }
